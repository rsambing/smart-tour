#!/usr/bin/env python3
"""
SmartTour Angola - Desktop App
Interface desktop moderna para an√°lise de turismo sustent√°vel
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import pandas as pd
from pathlib import Path
import threading
import webbrowser
import os
from datetime import datetime

# Import do sistema SmartTour
from smarttour_integrated import SmartTourAngola

class SmartTourDesktop:
    """Aplica√ß√£o desktop do SmartTour Angola"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.smarttour = SmartTourAngola()
        self.setup_styles()
        self.setup_ui()
        
    def setup_styles(self):
        """Configura tema escuro moderno com verde e dourado"""
        
        # Cores do tema ecol√≥gico
        self.colors = {
            'bg_dark': '#1a1a1a',        # Fundo escuro principal
            'bg_medium': '#2d2d2d',      # Fundo m√©dio
            'bg_light': '#404040',       # Fundo claro
            'green_primary': '#00d084',   # Verde principal (moderno)
            'green_secondary': '#66ff99', # Verde claro
            'gold': '#ffd700',           # Dourado
            'gold_light': '#ffed4e',     # Dourado claro
            'white': '#ffffff',          # Branco
            'gray': '#cccccc',           # Cinza claro
            'red_angola': '#CE1126',     # Vermelho Angola
            'yellow_angola': '#FFCD00'   # Amarelo Angola
        }
        
        # Configura√ß√£o da janela principal
        self.root.configure(bg=self.colors['bg_dark'])
        
        # Estilo para ttk widgets
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # Configura√ß√µes de estilo
        self.style.configure('Dark.TFrame', background=self.colors['bg_dark'])
        self.style.configure('Medium.TFrame', background=self.colors['bg_medium'])
        
        self.style.configure('Title.TLabel',
                           background=self.colors['bg_dark'],
                           foreground=self.colors['gold'],
                           font=('Segoe UI', 24, 'bold'))
        
        self.style.configure('Subtitle.TLabel',
                           background=self.colors['bg_dark'],
                           foreground=self.colors['green_primary'],
                           font=('Segoe UI', 14, 'bold'))
        
        self.style.configure('Info.TLabel',
                           background=self.colors['bg_dark'],
                           foreground=self.colors['white'],
                           font=('Segoe UI', 10))
        
        self.style.configure('Green.TButton',
                           background=self.colors['green_primary'],
                           foreground='white',
                           font=('Segoe UI', 11, 'bold'),
                           borderwidth=0,
                           focuscolor='none')
        
        self.style.configure('Gold.TButton',
                           background=self.colors['gold'],
                           foreground=self.colors['bg_dark'],
                           font=('Segoe UI', 11, 'bold'),
                           borderwidth=0,
                           focuscolor='none')
    
    def setup_ui(self):
        """Configura interface do usu√°rio"""
        
        self.root.title("üá¶üá¥ SmartTour Angola - Desktop")
        self.root.geometry("1200x800")
        self.root.minsize(1000, 700)
        
        # √çcone da janela (usar emoji como fallback)
        try:
            self.root.iconbitmap('icon.ico')
        except:
            pass
        
        # Frame principal
        self.main_frame = ttk.Frame(self.root, style='Dark.TFrame')
        self.main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Cabe√ßalho
        self.create_header()
        
        # √Årea de controles
        self.create_controls()
        
        # √Årea de resultados
        self.create_results_area()
        
        # √Årea de status
        self.create_status_bar()
    
    def create_header(self):
        """Cria cabe√ßalho da aplica√ß√£o"""
        
        header_frame = ttk.Frame(self.main_frame, style='Dark.TFrame')
        header_frame.pack(fill='x', pady=(0, 20))
        
        # T√≠tulo principal
        title = ttk.Label(header_frame, text="üá¶üá¥ SmartTour Angola", style='Title.TLabel')
        title.pack(anchor='w')
        
        # Subt√≠tulo
        subtitle = ttk.Label(header_frame, 
                           text="Sistema de An√°lise de Turismo Sustent√°vel", 
                           style='Subtitle.TLabel')
        subtitle.pack(anchor='w')
        
        # Info adicional
        info = ttk.Label(header_frame,
                        text="Descentraliza√ß√£o e Ecoturismo | FTL Bootcamp",
                        style='Info.TLabel')
        info.pack(anchor='w', pady=(5, 0))
    
    def create_controls(self):
        """Cria √°rea de controles"""
        
        controls_frame = ttk.LabelFrame(self.main_frame, text="üéõÔ∏è Controles", 
                                      style='Medium.TFrame', padding=15)
        controls_frame.pack(fill='x', pady=(0, 20))
        
        # Frame para bot√µes
        buttons_frame = ttk.Frame(controls_frame, style='Medium.TFrame')
        buttons_frame.pack(fill='x')
        
        # Bot√µes principais
        btn_load_default = ttk.Button(buttons_frame, 
                                    text="üìä Carregar Dados Padr√£o",
                                    style='Green.TButton',
                                    command=self.load_default_data)
        btn_load_default.pack(side='left', padx=(0, 10))
        
        btn_load_custom = ttk.Button(buttons_frame,
                                   text="üìÅ Carregar Arquivos Personalizados", 
                                   style='Green.TButton',
                                   command=self.load_custom_data)
        btn_load_custom.pack(side='left', padx=(0, 10))
        
        btn_analyze = ttk.Button(buttons_frame,
                               text="üîç Executar An√°lise",
                               style='Gold.TButton', 
                               command=self.run_analysis)
        btn_analyze.pack(side='left', padx=(0, 10))
        
        btn_export = ttk.Button(buttons_frame,
                              text="üìÑ Gerar Relat√≥rio HTML",
                              style='Gold.TButton',
                              command=self.export_report)
        btn_export.pack(side='left', padx=(0, 10))
        
        btn_open_report = ttk.Button(buttons_frame,
                                   text="üåê Abrir Relat√≥rio",
                                   style='Green.TButton',
                                   command=self.open_report)
        btn_open_report.pack(side='right')
    
    def create_results_area(self):
        """Cria √°rea de resultados"""
        
        # Notebook para abas
        self.notebook = ttk.Notebook(self.main_frame)
        self.notebook.pack(fill='both', expand=True, pady=(0, 10))
        
        # Aba 1: KPIs Principais
        self.create_kpis_tab()
        
        # Aba 2: Dados Detalhados
        self.create_data_tab()
        
        # Aba 3: Log do Sistema
        self.create_log_tab()
    
    def create_kpis_tab(self):
        """Cria aba de KPIs principais"""
        
        kpis_frame = ttk.Frame(self.notebook, style='Dark.TFrame')
        self.notebook.add(kpis_frame, text="üìà KPIs Principais")
        
        # Frame para cart√µes de KPI
        cards_frame = ttk.Frame(kpis_frame, style='Dark.TFrame')
        cards_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Grid de KPIs
        self.create_kpi_cards(cards_frame)
    
    def create_kpi_cards(self, parent):
        """Cria cart√µes de KPI"""
        
        # Frame para linha 1
        row1 = ttk.Frame(parent, style='Dark.TFrame')
        row1.pack(fill='x', pady=(0, 20))
        
        # Frame para linha 2
        row2 = ttk.Frame(parent, style='Dark.TFrame')
        row2.pack(fill='x')
        
        # KPI Cards
        self.kpi_cards = {}
        
        # Linha 1 - KPIs de Turismo
        self.kpi_cards['visitors'] = self.create_kpi_card(row1, "üë• Visitantes Anuais", "0", self.colors['green_primary'])
        self.kpi_cards['foreign'] = self.create_kpi_card(row1, "üåç Visitantes Estrangeiros", "0%", self.colors['gold'])
        self.kpi_cards['stay'] = self.create_kpi_card(row1, "üè® Estadia M√©dia", "0 noites", self.colors['green_secondary'])
        
        # Linha 2 - KPIs de Sustentabilidade  
        self.kpi_cards['sustainable'] = self.create_kpi_card(row2, "üå± Sites Sustent√°veis", "0%", self.colors['green_primary'])
        self.kpi_cards['capacity'] = self.create_kpi_card(row2, "üèûÔ∏è Capacidade Total", "0/dia", self.colors['gold'])
        self.kpi_cards['score'] = self.create_kpi_card(row2, "‚≠ê Score Sustentabilidade", "0/10", self.colors['green_secondary'])
    
    def create_kpi_card(self, parent, title, value, color):
        """Cria um cart√£o individual de KPI"""
        
        card_frame = tk.Frame(parent, bg=self.colors['bg_medium'], 
                            relief='raised', bd=2)
        
        # Determinar padding baseado na posi√ß√£o
        existing_children = len(parent.winfo_children())
        padx = (0, 10) if existing_children < 2 else (0, 0)
        card_frame.pack(side='left', fill='both', expand=True, padx=padx)
        
        # T√≠tulo
        title_label = tk.Label(card_frame, text=title,
                             bg=self.colors['bg_medium'],
                             fg=self.colors['gray'],
                             font=('Segoe UI', 10))
        title_label.pack(pady=(15, 5))
        
        # Valor
        value_label = tk.Label(card_frame, text=value,
                             bg=self.colors['bg_medium'],
                             fg=color,
                             font=('Segoe UI', 18, 'bold'))
        value_label.pack(pady=(0, 15))
        
        return value_label
    
    def create_data_tab(self):
        """Cria aba de dados detalhados"""
        
        data_frame = ttk.Frame(self.notebook, style='Dark.TFrame')
        self.notebook.add(data_frame, text="üìä Dados Detalhados")
        
        # √Årea de texto com scroll
        self.data_text = scrolledtext.ScrolledText(
            data_frame,
            bg=self.colors['bg_medium'],
            fg=self.colors['white'],
            font=('Consolas', 10),
            wrap='word',
            height=25
        )
        self.data_text.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Texto inicial
        self.data_text.insert('1.0', 
            "üá¶üá¥ SmartTour Angola - Dados Detalhados\n" +
            "=" * 60 + "\n\n" +
            "Carregue os dados para visualizar informa√ß√µes detalhadas...\n\n" +
            "üìä Funcionalidades dispon√≠veis:\n" +
            "‚Ä¢ An√°lise de visitantes por prov√≠ncia\n" +
            "‚Ä¢ Avalia√ß√£o de sustentabilidade de s√≠tios\n" +
            "‚Ä¢ KPIs automatizados\n" +
            "‚Ä¢ Relat√≥rios HTML interativos\n\n"
        )
    
    def create_log_tab(self):
        """Cria aba de log do sistema"""
        
        log_frame = ttk.Frame(self.notebook, style='Dark.TFrame')
        self.notebook.add(log_frame, text="üìã Log do Sistema")
        
        # √Årea de log
        self.log_text = scrolledtext.ScrolledText(
            log_frame,
            bg=self.colors['bg_dark'],
            fg=self.colors['green_secondary'],
            font=('Consolas', 9),
            wrap='word',
            height=25
        )
        self.log_text.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Log inicial
        self.add_log("SmartTour Angola Desktop iniciado")
        self.add_log("Sistema pronto para carregar dados")
    
    def create_status_bar(self):
        """Cria barra de status"""
        
        self.status_frame = ttk.Frame(self.main_frame, style='Medium.TFrame')
        self.status_frame.pack(fill='x', pady=(10, 0))
        
        self.status_label = ttk.Label(self.status_frame,
                                    text="üü¢ Sistema pronto",
                                    style='Info.TLabel')
        self.status_label.pack(side='left', padx=10, pady=5)
        
        # Indicador de progresso
        self.progress = ttk.Progressbar(self.status_frame, mode='indeterminate')
        self.progress.pack(side='right', padx=10, pady=5)
    
    def add_log(self, message):
        """Adiciona mensagem ao log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        self.log_text.insert('end', log_entry)
        self.log_text.see('end')
        self.root.update_idletasks()
    
    def update_status(self, message):
        """Atualiza barra de status"""
        self.status_label.config(text=message)
        self.root.update_idletasks()
    
    def show_progress(self, show=True):
        """Mostra/esconde barra de progresso"""
        if show:
            self.progress.start(10)
        else:
            self.progress.stop()
    
    def load_default_data(self):
        """Carrega dados padr√£o do hackathon"""
        self.add_log("Iniciando carregamento de dados padr√£o...")
        self.update_status("üîÑ Carregando dados padr√£o...")
        self.show_progress(True)
        
        def load_task():
            try:
                success = self.smarttour.load_data()
                
                if success:
                    self.root.after(0, lambda: self.on_data_loaded(True, "Dados padr√£o carregados com sucesso!"))
                else:
                    self.root.after(0, lambda: self.on_data_loaded(False, "Erro ao carregar dados padr√£o"))
                    
            except Exception as e:
                self.root.after(0, lambda: self.on_data_loaded(False, f"Erro: {str(e)}"))
        
        # Executar em thread separada
        threading.Thread(target=load_task, daemon=True).start()
    
    def load_custom_data(self):
        """Carrega dados personalizados"""
        
        visitors_file = filedialog.askopenfilename(
            title="Selecione arquivo de visitantes",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        
        if not visitors_file:
            return
        
        eco_sites_file = filedialog.askopenfilename(
            title="Selecione arquivo de s√≠tios ecol√≥gicos", 
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        
        if not eco_sites_file:
            return
        
        self.add_log(f"Carregando dados personalizados...")
        self.add_log(f"Visitantes: {Path(visitors_file).name}")
        self.add_log(f"S√≠tios: {Path(eco_sites_file).name}")
        
        self.update_status("üîÑ Carregando dados personalizados...")
        self.show_progress(True)
        
        def load_task():
            try:
                success = self.smarttour.load_data(visitors_file, eco_sites_file)
                
                if success:
                    message = "Dados personalizados carregados com sucesso!"
                    self.root.after(0, lambda: self.on_data_loaded(True, message))
                else:
                    message = "Erro ao carregar dados personalizados"
                    self.root.after(0, lambda: self.on_data_loaded(False, message))
                    
            except Exception as e:
                self.root.after(0, lambda: self.on_data_loaded(False, f"Erro: {str(e)}"))
        
        threading.Thread(target=load_task, daemon=True).start()
    
    def on_data_loaded(self, success, message):
        """Callback quando dados s√£o carregados"""
        self.show_progress(False)
        
        if success:
            self.add_log(message)
            self.update_status("üü¢ Dados carregados - Pronto para an√°lise")
            
            # Atualizar √°rea de dados
            self.update_data_display()
            
            messagebox.showinfo("Sucesso", message)
        else:
            self.add_log(f"ERRO: {message}")
            self.update_status("üî¥ Erro no carregamento")
            messagebox.showerror("Erro", message)
    
    def update_data_display(self):
        """Atualiza exibi√ß√£o de dados"""
        status = self.smarttour.get_status()
        
        data_info = f"""üá¶üá¥ SmartTour Angola - Dados Carregados
{"=" * 60}

üìä ESTAT√çSTICAS DOS DADOS:
‚Ä¢ Prov√≠ncias dispon√≠veis: {status['provinces_available']}
‚Ä¢ S√≠tios ecol√≥gicos: {status['eco_sites_available']}
‚Ä¢ Status: {'‚úÖ Carregado' if status['data_loaded'] else '‚ùå N√£o carregado'}

üìã DADOS DE VISITANTES:
"""
        
        if self.smarttour.visitor_data is not None:
            df = self.smarttour.visitor_data
            data_info += f"""‚Ä¢ Total de registros: {len(df)}
‚Ä¢ Per√≠odo: {df['date'].min().strftime('%Y-%m-%d')} at√© {df['date'].max().strftime('%Y-%m-%d')}
‚Ä¢ Prov√≠ncias: {', '.join(df['province'].unique())}

"""
        
        data_info += "üèûÔ∏è DADOS DE S√çTIOS ECOL√ìGICOS:\n"
        
        if self.smarttour.eco_sites_data is not None:
            df = self.smarttour.eco_sites_data
            data_info += f"""‚Ä¢ Total de s√≠tios: {len(df)}
‚Ä¢ Prov√≠ncias cobertas: {', '.join(df['province'].unique())}
‚Ä¢ Capacidade total: {df['capacity_daily'].sum():,} visitantes/dia
‚Ä¢ S√≠tios por fragilidade:
"""
            fragility_counts = df['fragility_index'].value_counts().sort_index()
            for idx, count in fragility_counts.items():
                level = ["", "Muito Baixa", "Baixa", "M√©dia", "Alta", "Muito Alta"][idx]
                data_info += f"  - √çndice {idx} ({level}): {count} s√≠tios\n"
        
        data_info += f"""

üîç PR√ìXIMOS PASSOS:
1. Clique em "üîç Executar An√°lise" para processar os dados
2. Ap√≥s a an√°lise, clique em "üìÑ Gerar Relat√≥rio HTML"
3. Use "üåê Abrir Relat√≥rio" para visualizar os resultados

‚è∞ √öltima atualiza√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
        
        # Limpa e atualiza texto
        self.data_text.delete('1.0', 'end')
        self.data_text.insert('1.0', data_info)
    
    def run_analysis(self):
        """Executa an√°lise completa"""
        if not self.smarttour.data_loaded:
            messagebox.showwarning("Aviso", "Carregue os dados primeiro!")
            return
        
        self.add_log("Iniciando an√°lise completa...")
        self.update_status("üîÑ Executando an√°lise...")
        self.show_progress(True)
        
        def analysis_task():
            try:
                success = self.smarttour.perform_analysis()
                
                if success:
                    self.root.after(0, lambda: self.on_analysis_completed(True, "An√°lise conclu√≠da com sucesso!"))
                else:
                    self.root.after(0, lambda: self.on_analysis_completed(False, "Erro na an√°lise"))
                    
            except Exception as e:
                self.root.after(0, lambda: self.on_analysis_completed(False, f"Erro: {str(e)}"))
        
        threading.Thread(target=analysis_task, daemon=True).start()
    
    def on_analysis_completed(self, success, message):
        """Callback quando an√°lise √© conclu√≠da"""
        self.show_progress(False)
        
        if success:
            self.add_log(message)
            self.update_status("üü¢ An√°lise conclu√≠da - Pronto para gerar relat√≥rio")
            
            # Atualizar KPIs
            self.update_kpi_display()
            
            # Atualizar dados detalhados
            self.update_detailed_results()
            
            messagebox.showinfo("Sucesso", message + "\n\nKPIs atualizados na interface!")
        else:
            self.add_log(f"ERRO: {message}")
            self.update_status("üî¥ Erro na an√°lise")
            messagebox.showerror("Erro", message)
    
    def update_kpi_display(self):
        """Atualiza exibi√ß√£o dos KPIs"""
        if not self.smarttour.analysis_completed:
            return
        
        kpis = self.smarttour.kpis
        tourism_kpis = kpis.get('tourism_kpis', {})
        sustainability_kpis = kpis.get('sustainability_kpis', {})
        
        # Atualizar valores dos KPIs
        self.kpi_cards['visitors'].config(text=f"{tourism_kpis.get('total_annual_visitors', 0):,}")
        self.kpi_cards['foreign'].config(text=f"{tourism_kpis.get('foreign_visitor_percentage', 0)}%")
        self.kpi_cards['stay'].config(text=f"{tourism_kpis.get('average_stay_duration', 0)} noites")
        
        self.kpi_cards['sustainable'].config(text=f"{sustainability_kpis.get('sustainable_sites_percentage', 0)}%")
        self.kpi_cards['capacity'].config(text=f"{sustainability_kpis.get('total_eco_capacity', 0):,}/dia")
        self.kpi_cards['score'].config(text=f"{sustainability_kpis.get('average_sustainability_score', 0):.1f}/10")
        
        self.add_log("KPIs atualizados na interface")
    
    def update_detailed_results(self):
        """Atualiza resultados detalhados"""
        if not self.smarttour.analysis_completed:
            return
        
        # Gerar texto detalhado dos resultados
        results_text = self.generate_detailed_results_text()
        
        # Atualizar aba de dados
        self.data_text.delete('1.0', 'end')
        self.data_text.insert('1.0', results_text)
    
    def generate_detailed_results_text(self):
        """Gera texto detalhado dos resultados"""
        kpis = self.smarttour.kpis
        visitor_insights = self.smarttour.visitor_insights
        eco_insights = self.smarttour.eco_insights
        summary = self.smarttour.summary_report
        
        text = f"""üá¶üá¥ SmartTour Angola - Resultados da An√°lise
{"=" * 70}

üìä KPIs PRINCIPAIS:
{"‚îÄ" * 50}

üéØ TURISMO:
‚Ä¢ Visitantes anuais estimados: {kpis.get('tourism_kpis', {}).get('total_annual_visitors', 0):,}
‚Ä¢ Visitantes estrangeiros: {kpis.get('tourism_kpis', {}).get('foreign_visitor_percentage', 0)}%
‚Ä¢ Estadia m√©dia: {kpis.get('tourism_kpis', {}).get('average_stay_duration', 0)} noites
‚Ä¢ Varia√ß√£o sazonal: {kpis.get('tourism_kpis', {}).get('seasonal_variation', 0)}%

üå± SUSTENTABILIDADE:
‚Ä¢ Sites sustent√°veis: {kpis.get('sustainability_kpis', {}).get('sustainable_sites_percentage', 0)}%
‚Ä¢ Capacidade total di√°ria: {kpis.get('sustainability_kpis', {}).get('total_eco_capacity', 0):,}
‚Ä¢ Score m√©dio de sustentabilidade: {kpis.get('sustainability_kpis', {}).get('average_sustainability_score', 0):.1f}/10
‚Ä¢ Prov√≠ncias com s√≠tios: {kpis.get('sustainability_kpis', {}).get('provinces_with_eco_sites', 0)}

üí∞ ECON√îMICO:
‚Ä¢ Receita anual estimada: {kpis.get('economic_kpis', {}).get('estimated_annual_revenue', 0):,} AOA
‚Ä¢ Taxa m√©dia por s√≠tio: {kpis.get('economic_kpis', {}).get('average_site_fee', 0):,.0f} AOA

üèÜ TOP PROV√çNCIAS POR VISITANTES:
{"‚îÄ" * 50}
"""
        
        # Top prov√≠ncias
        if 'top_provinces' in summary:
            for i, (province, data) in enumerate(summary['top_provinces'].items(), 1):
                text += f"{i}. {province}:\n"
                text += f"   ‚Ä¢ Visitantes: {data['visitors']:,}\n"
                text += f"   ‚Ä¢ Estrangeiros: {data['foreign_share']}%\n"
                text += f"   ‚Ä¢ Estadia m√©dia: {data['avg_stay']:.1f} noites\n\n"
        
        # Principais achados
        text += f"""üí° PRINCIPAIS ACHADOS:
{"‚îÄ" * 50}
"""
        if 'executive_summary' in summary:
            for finding in summary['executive_summary'].get('key_findings', []):
                text += f"‚Ä¢ {finding}\n"
        
        text += f"""
üéØ RECOMENDA√á√ïES:
{"‚îÄ" * 50}
"""
        if 'executive_summary' in summary:
            for rec in summary['executive_summary'].get('recommendations', []):
                text += f"‚Ä¢ {rec}\n"
        
        text += f"""
üìà AN√ÅLISE SAZONAL:
{"‚îÄ" * 50}
"""
        if 'seasonal_patterns' in visitor_insights:
            seasonal = visitor_insights['seasonal_patterns']
            text += f"‚Ä¢ √âpoca Alta: {seasonal['peak_season']['total_visitors']:,} visitantes\n"
            text += f"‚Ä¢ √âpoca Baixa: {seasonal['offpeak_season']['total_visitors']:,} visitantes\n"
        
        text += f"""
üèûÔ∏è S√çTIOS POR SUSTENTABILIDADE:
{"‚îÄ" * 50}
"""
        if 'sustainability_analysis' in eco_insights:
            sustain = eco_insights['sustainability_analysis']
            text += f"‚Ä¢ Alta sustentabilidade: {sustain.get('high_sustainability', 0)} s√≠tios\n"
            text += f"‚Ä¢ Sustentabilidade moderada: {sustain.get('moderate_sustainability', 0)} s√≠tios\n"
            text += f"‚Ä¢ Requer cuidados: {sustain.get('requires_care', 0)} s√≠tios\n"
            text += f"‚Ä¢ Alta fragilidade: {sustain.get('high_fragility', 0)} s√≠tios\n"
        
        text += f"""

‚è∞ An√°lise gerada em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
üìã Use o bot√£o "Gerar Relat√≥rio HTML" para obter visualiza√ß√µes interativas!
"""
        
        return text
    
    def export_report(self):
        """Exporta relat√≥rio HTML"""
        if not self.smarttour.analysis_completed:
            messagebox.showwarning("Aviso", "Execute a an√°lise primeiro!")
            return
        
        # Selecionar local para salvar
        filename = filedialog.asksaveasfilename(
            defaultextension=".html",
            filetypes=[("HTML files", "*.html"), ("All files", "*.*")],
            title="Salvar relat√≥rio como..."
        )
        
        if not filename:
            return
        
        self.add_log(f"Gerando relat√≥rio HTML: {Path(filename).name}")
        self.update_status("üîÑ Gerando relat√≥rio HTML...")
        self.show_progress(True)
        
        def export_task():
            try:
                success = self.smarttour.export_report(filename)
                
                if success:
                    message = f"Relat√≥rio salvo em: {filename}"
                    self.root.after(0, lambda: self.on_report_exported(True, message, filename))
                else:
                    message = "Erro ao gerar relat√≥rio HTML"
                    self.root.after(0, lambda: self.on_report_exported(False, message, None))
                    
            except Exception as e:
                self.root.after(0, lambda: self.on_report_exported(False, f"Erro: {str(e)}", None))
        
        threading.Thread(target=export_task, daemon=True).start()
    
    def on_report_exported(self, success, message, filename):
        """Callback quando relat√≥rio √© exportado"""
        self.show_progress(False)
        
        if success:
            self.add_log(message)
            self.update_status("üü¢ Relat√≥rio HTML gerado com sucesso")
            self.last_report_path = filename
            
            result = messagebox.askyesno("Sucesso", 
                                       message + "\n\nDeseja abrir o relat√≥rio agora?")
            if result:
                self.open_report(filename)
        else:
            self.add_log(f"ERRO: {message}")
            self.update_status("üî¥ Erro na gera√ß√£o do relat√≥rio")
            messagebox.showerror("Erro", message)
    
    def open_report(self, filepath=None):
        """Abre relat√≥rio no navegador"""
        if not filepath:
            # Procurar arquivo padr√£o
            default_path = "smarttour_angola_report.html"
            if os.path.exists(default_path):
                filepath = default_path
            elif hasattr(self, 'last_report_path'):
                filepath = self.last_report_path
            else:
                messagebox.showwarning("Aviso", "Nenhum relat√≥rio encontrado. Gere um relat√≥rio primeiro!")
                return
        
        try:
            # Abrir no navegador
            webbrowser.open(f"file://{os.path.abspath(filepath)}")
            self.add_log(f"Relat√≥rio aberto: {Path(filepath).name}")
        except Exception as e:
            messagebox.showerror("Erro", f"N√£o foi poss√≠vel abrir o relat√≥rio: {str(e)}")
    
    def run(self):
        """Executa a aplica√ß√£o"""
        self.add_log("Interface desktop carregada com sucesso")
        self.root.mainloop()

def main():
    """Fun√ß√£o principal"""
    try:
        app = SmartTourDesktop()
        app.run()
    except Exception as e:
        print(f"Erro ao iniciar aplica√ß√£o: {e}")
        messagebox.showerror("Erro Fatal", f"Erro ao iniciar aplica√ß√£o:\n{str(e)}")

if __name__ == "__main__":
    main()
